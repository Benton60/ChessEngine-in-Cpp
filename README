Chess Engine For C++ Final Project
By Benton Hershberger, William Walline


Note 1:
    None of the classes have getters or setters because that adds one layer of abstraction. Normally the safety
    that they ensure is worth the nanoseconds of delay it creates, but in the case of a chess engine where efficiency is
    so critical we must leave them out.



Project Structure:
    Coordinate class -> The Coordinate class is the most basic class that stores a rank and file that corresponds to a square on the board.
                        We use these to access and modify squares on the chess board by passing coordinates to the position class.

    Move class       -> The move class is one level up from the Coordinate class. It stores two coordinates, a start square and an end square.
                        It also has a capturedPiece variable that gets defined when the move is made in the position class.
                        The capturedPiece variable stores the value that was overwritten when the move was made. We can use this variable to unmake a move on the chess board.

    Position class   -> The position class is the class that holds the 2D array that represents the chess board. All access and change of values on the board should flow
                        through this class. It holds all the getters and setters for the chess board.



Piece values:
    (Sub-Note 1: These values are based off of relative piece worth. EX: a queen is worth nine pawns)
    (Sub-Note 2: The black piece values are the same as the white pieces just multiplied by negative one)

    King - 10000   //I just picked a really big number so that it favors the king more than other pieces
    Queen - 900
    Rook - 500
    Bishop - 350
    Knight - 300
    Pawn - 100

How to use example positions in main class:
    1. Run Program
    2. When prompted to enter the value for coordinate (0,0)... copy and paste the entire position and hit enter.
    3. Enter the color as given in the example
    4. Enter the depth as given in the example
    5. Compare best move output with best move given in example

References and Resources:
    FIDE's International Chess Rulebook - "https://handbook.fide.com/"
    Alpha-Beta Pruning - "https://www.chessprogramming.org/Alpha-Beta#:~:text=The%20Alpha%2DBeta%20algorithm%20(Alpha,of%20overlooking%20a%20better%20move."
